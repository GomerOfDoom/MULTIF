environment
  output_precision = 16
  method_pointer = 'MLPCE'

method,
	id_method = 'MLPCE'
	model_pointer = 'HIERARCH'
        polynomial_chaos				
	  expansion_order = 2				# initial for pilot
	  collocation_ratio = .9			# eo adapted to ratio
	  seed = 1237
	  orthogonal_matching_pursuit
#	  max_iterations = 5
# Tighten this as budget allows...
	  convergence_tolerance = 1e-8			#s0
#	  convergence_tolerance = .01			#s1
#	  convergence_tolerance = .001			#s2
#	  convergence_tolerance = .0001			#s3
#	output debug

model,
	id_model = 'HIERARCH'
	surrogate hierarchical
	  ordered_model_fidelities = 'EULER'
	  correction additive zeroth_order

model,
	id_model = 'EULER'
	interface_pointer = 'MF_I'
	simulation
	  solution_level_control = 'MF_discretization'
	  solution_level_cost = 22.5 423 107 # match ascending MF_discretization

variables,
	uniform_uncertain = 15
    	  lower_bounds      =  897.75        8.064                  57000      248.9      7.38e10           1.8e-6                216000        0.005  0.005  0.005  0.005  0.005  0.005  0.005  0.005
    	  upper_bounds      =  992.25        9.856                  63000      275.1      9.02e10           2.2e-6                264000        0.03   0.03   0.03   0.03   0.03   0.03   0.03   0.03
    	  descriptors       = 'INLET_TSTAG' 'THERMAL_CONDUCTIVITY' 'ATM_PRES' 'ATM_TEMP' 'ELASTIC_MODULUS' 'THERMAL_DIFFUSIVITY' 'INLET_PSTAG' 'LWT1' 'LWT2' 'LWT3' 'LWT4' 'UWT1' 'UWT2' 'UWT3' 'UWT4'
	discrete_state_set
	  string = 1
	    num_set_values = 3
	    set_values = 'COARSE' 'FINE' 'MEDIUM'
	    initial_state = 'COARSE'
	    descriptors 'MF_discretization'

interface
  id_interface = 'MF_I'
     analysis_driver = 'python_dprepro_driver1' # if MF_discretization is active
#    analysis_driver = 'python runModel.py -f input.cfg -l 1' # python model2
        fork
        work_directory named '/gscratch/jamonsc/mlpce/dakota_work_mf_3'
        link_files '/ascldap/users/jamonsc/multif/*'
        directory_tag directory_save
        #file_tag 
	file_save
        parameters_file = 'inputdv_all.in'
        results_file    = 'output.dat'

responses
  response_functions = 4
  no_gradients
  no_hessians
  response_descriptors = 'VOLUME' 'THRUST' 'MECHANICAL_STRESS' 'THERMAL_STRESS'
